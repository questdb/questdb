statement ok
CREATE TABLE quantile as (
SELECT * FROM (SELECT (x-1) as r, rnd_double() AS q
FROM long_sequence(10000)
UNION ALL
SELECT NULL, 0.1
UNION ALL
SELECT NULL, 0.5
UNION ALL
SELECT NULL, 0.9
)
ORDER BY 2
);


query I
SELECT quantile_disc(r, 0.5) FROM quantile
----
4999

#query I
#SELECT quantile_disc(r::decimal(10,2), 0.5) FROM quantile
#----
#4999

query I
SELECT quantile_disc(r, 1.0) FROM quantile
----
9999

query I
SELECT quantile_disc(r, 0.0) FROM quantile
----
0

query I
SELECT quantile_disc(NULL, 0.5) FROM quantile
----
NULL

query I
SELECT quantile_disc(42, 0.5) FROM quantile
----
42

query I
SELECT quantile_disc(NULL, 0.5)
----
NULL

query I
SELECT quantile_disc(42, 0.5)
----
42

# single GROUP
query III
SELECT quantile_disc(r, 0.1), quantile_disc(r, 0.5), quantile_disc(r, 0.9) from quantile
----
999 4999 8999

#foreach type decimal(4,1) decimal(8,1) decimal(12,1) decimal(18,1) decimal(24,1)

#query III
#SELECT quantile_disc(d::${type}, 0.1), quantile_disc(d::${type}, 0.5), quantile_disc(d::${type}, 0.9)
##FROM range(0,100) tbl(d)
#----
#9.0	49.0	89.0

#endloop

# Negative quantiles (use descending intervals)
query I
SELECT quantile_disc(col, -0.5)
FROM
( SELECT 11000 col UNION SELECT 3100 col UNION SELECT 2900 col UNION SELECT 2600 col UNION SELECT 2500 col );
----
2900

# ORDER BY ... DESC
#query II
#SELECT
#    percentile_disc(0.8) WITHIN GROUP (ORDER BY x DESC),
#    quantile_disc(x, 0.8 ORDER BY x DESC),
#FROM
#    (VALUES (2), (1)) _(x);
#----
#1.2	1.2

#
# Multiple groups
#
query II
SELECT r % 10 as g, quantile_disc(r, 0.1) FROM quantile GROUP BY 1 ORDER BY 1
----
NULL	NULL
0	990
1	991
2	992
3	993
4	994
5	995
6	996
7	997
8	998
9	999

# temporal types
query I
SELECT quantile_disc(dateadd('h', r::int, '2021-01-01'::timestamp)::long, 0.5)::timestamp FROM quantile
----
2021-07-28 07:00:00

# constant input
query I
SELECT quantile_disc(1, 0.1) FROM quantile
----
1

# empty input
query I
SELECT quantile_disc(r, 0.1) FROM quantile WHERE 1=0
----
NULL

# Invalid usage
statement error
SELECT quantile_disc(r, -1.1) FROM quantile


statement error
SELECT quantile_disc(r, 1.1) FROM quantile


statement error
SELECT quantile_disc(r, "string") FROM quantile


statement error
SELECT quantile_disc(r, NULL) FROM quantile


statement error
SELECT quantile_disc(r) FROM quantile


statement error
SELECT quantile_disc(r, 0.1, 50) FROM quantile


statement error
SELECT quantile_cont(r, q) FROM quantile


statement ok
pragma threads=4

statement ok
PRAGMA verify_parallelism

# single GROUP
query III
SELECT quantile_disc(r, 0.1), quantile_disc(r, 0.5), quantile_disc(r, 0.9) from quantile
----
999
4999
8999

# multiple groups
query II
SELECT mod(r,10) as g, quantile_disc(r, 0.1) FROM quantile GROUP BY 1 ORDER BY 1
----
NULL	NULL
0	990
1	991
2	992
3	993
4	994
5	995
6	996
7	997
8	998
9	999

# constant input
query I
SELECT quantile_disc(1, 0.1) FROM quantile
----
1

# empty input
query I
SELECT quantile_disc(r, 0.1) FROM quantile WHERE 1=0
----
NULL

# NaNs
query I
with a as (
	select 'NaN'::double as num
	union all
	select num::double as num from generate_series(1,99) as tbl(num)
	union all
	select 'NaN'::double as num
)
select quantile_disc(num, 0.9) c1
from a;
----
91.0

query I
with a as (
	select 'NaN'::float as num
	union all
	select num::float as num from generate_series(1,99) as tbl(num)
	union all
	select 'NaN'::float as num
)
select quantile_disc(num, 0.9) c1
from a;
----
91.0
