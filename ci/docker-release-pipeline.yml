trigger:
  branches:
    include:
      - 'patch/*'

pool:
  vmImage: 'ubuntu-20.04'

jobs:
  - job: RunOn
    displayName: "Build and push docker"

    pool:
      name: "Azure Pipelines"
      vmImage: "ubuntu-latest"

    timeoutInMinutes: 60

    steps:
      - task: Docker@2
        inputs:
          command: 'login'
          containerRegistry: quest_docker_hub

      - task: CmdLine@2
        displayName: Setup docker buildx
        inputs:
          script: |
            docker run --privileged --rm tonistiigi/binfmt --install arm64
            docker run --privileged --rm tonistiigi/binfmt
            docker buildx create --use

      - task: CmdLine@2
        displayName: Release Nightly MASTER
        inputs:
          script: |
            docker buildx build --platform linux/amd64,linux/arm64 --push -t questdb/questdb:nightly .
            docker buildx build --build-arg base_image=registry.access.redhat.com/ubi9/ubi --platform linux/amd64,linux/arm64 --push -t questdb/questdb:nightly-rhel .
          workingDirectory: core
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

      - task: CmdLine@2
        displayName: Release Tag
        inputs:
          script: |
            docker buildx build --build-arg tag_name=$(Build.SourceBranchName) --platform linux/amd64,linux/arm64 --push -t questdb/questdb:$(Build.SourceBranchName) .
            docker buildx build --build-arg tag_name=$(Build.SourceBranchName) --build-arg base_image=registry.access.redhat.com/ubi9/ubi --platform linux/amd64,linux/arm64 --push -t questdb/questdb:$(Build.SourceBranchName)-rhel .
          workingDirectory: core
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))

      - task: CmdLine@2
        displayName: Release Commit from Branch
        inputs:
          script: |
            docker buildx build --build-arg tag_name=$(Build.SourceVersion) --platform linux/amd64,linux/arm64 --push -t questdb/questdb:$(Build.SourceVersion) .
            docker buildx build --build-arg tag_name=$(Build.SourceVersion) --build-arg base_image=registry.access.redhat.com/ubi9/ubi --platform linux/amd64,linux/arm64 --push -t questdb/questdb:$(Build.SourceVersion)-rhel .
          workingDirectory: core
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/'), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
