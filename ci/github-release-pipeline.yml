trigger:
  branches:
    exclude:
      - "*"
  tags:
    include:
      - '*.*.*'

pr: none

stages:
  - stage: BuildAndRunOnAzure
    displayName: "Building Binaries"
    jobs:
      - job: BuildMatrix
        displayName: "Build for Multiple OS"
        strategy:
          matrix:
            linux-jdk17:
              vmImage: 'ubuntu-latest'
              jdk: '1.17'
            windows:
              vmImage: 'windows-latest'
              jdk : '1.17'
              
        pool:
          vmImage: $(vmImage)
        timeoutInMinutes: 60
        steps:
          - checkout: self
            fetchDepth: 1
            lfs: false
            submodules: true

          - task: Maven@3
            displayName: "Build QuestDB"
            inputs:
              mavenPomFile: "core/pom.xml"
              goals: "package"
              options: "-DskipTests -Dhttp.keepAlive=false -P build-web-console,build-binaries"
              jdkVersionOption: $(jdk)

          - task: CopyFiles@2
            displayName: "Copy Build Artifacts"
            inputs:
              SourceFolder: '$(build.sourcesDirectory)/core/target'
              Contents: 'questdb-*.gz'
              TargetFolder: '$(build.artifactstagingdirectory)'

          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifacts"
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'

  - stage: Release_Artifacts
    displayName: "Release Binaries to GitHub"
    dependsOn:
      - BuildAndRunOnAzure
    jobs:
      - job: Release
        displayName: "Release to GitHub and Deploy AMI"
        pool:
          vmImage: 'ubuntu-24.04'
        steps:
          - checkout: self
            fetchDepth: 1
            lfs: false
            submodules: false
            persistCredentials: true

          - task: DownloadBuildArtifacts@1
            displayName: "Download Artifacts"
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'
              cleanDestinationFolder: true

          - script: |
              set -e
              tag_name=$(echo "$(Build.SourceBranch)" | cut -d'/' -f3-)
              
              echo "Release tag: ${tag_name}"

              # Validate tag format (basic SemVer)
              if ! [[ "$tag_name" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                echo "Invalid tag format: ${tag_name}"
                exit 1
              fi

              echo "Checking if GitHub release ${tag_name} exists..."
              if ! gh release view ${tag_name}; then
                echo "Creating new release for tag ${tag_name}..."
                gh release create ${tag_name} -t "${tag_name}" -n "Auto-generated release for ${tag_name}" --draft
              fi

              echo "Uploading assets to release..."
              gh release upload ${tag_name} $(System.ArtifactsDirectory)/drop/*.gz --clobber

              echo "Finalizing release..."
              gh release edit ${tag_name} --draft=false --latest
            env:
              GITHUB_TOKEN: $(GITHUB_TOKEN)

          - script: |
              sudo apt-get update
              cd "$(Build.SourcesDirectory)/pkg/ami/marketplace"
              make install_aws_plugin
              make build_release
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              AWS_DEFAULT_REGION: eu-west-1
            displayName: "AMI: Deploy Public Image"
