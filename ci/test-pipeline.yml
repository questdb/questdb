trigger: none

pr:
  branches:
    include:
      - master

variables:
  QDB_LOG_W_FILE_LOCATION: "$(Build.BinariesDirectory)/tests.log"
  ARCHIVED_LOGS: "$(Build.ArtifactStagingDirectory)/questdb-$(Build.SourceBranchName)-$(Build.SourceVersion)-$(System.StageAttempt)-$(Agent.OS)-$(jdk).zip"
  DIFF_COVER_THRESHOLD_PCT: 50
  includeTests: ""
  excludeTests: ""

stages:
  - stage: CheckChanges
    displayName: "Check Changes"
    jobs:
      - template: templates/check-changes-job.yml

  - stage: SelfHostedRunTestsBranches
    displayName: "Self Hosted Running tests"
    condition: eq(variables['System.PullRequest.IsFork'], 'false')
    dependsOn:
      - CheckChanges
    jobs:
      - job: StartArmAgent
        displayName: "Start ARM Agent"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - checkout: none
          - bash: |
              echo "buildno: $(Build.BuildId)"
              echo ${AZURE_DEVOPS_CLI_PAT} | az devops login
            env:
              AZURE_DEVOPS_CLI_PAT: $(System.AccessToken)
            displayName: "Login Azure DevOps Extension"
          - bash:
              az devops configure --defaults
              organization=$(System.TeamFoundationCollectionUri)
              project=$(System.TeamProject) --use-git-aliases true
            displayName: "Set default Azure DevOps organization and project"
          - task: LambdaInvokeFunction@1
            displayName: "Start Agent 1"
            name: "Start_Agent"
            inputs:
              awsCredentials: "ondemand-dev"
              regionName: "eu-west-1"
              functionName: "ondemand-pipeline"
              payload: |
                {
                  "pool": "arm64",
                  "buildid": "$(Build.BuildId)"
                }
              outputVariable: "functionResult"
          - task: LambdaInvokeFunction@1
            displayName: "Start Agent 2"
            name: "Start_Agent"
            inputs:
              awsCredentials: "ondemand-dev"
              regionName: "eu-west-1"
              functionName: "ondemand-pipeline"
              payload: |
                {
                  "pool": "arm64",
                  "buildid": "$(Build.BuildId)"
                }
              outputVariable: "functionResult"
          - task: LambdaInvokeFunction@1
            displayName: "Start Agent 3"
            name: "Start_Agent"
            inputs:
              awsCredentials: "ondemand-dev"
              regionName: "eu-west-1"
              functionName: "ondemand-pipeline"
              payload: |
                {
                  "pool": "arm64",
                  "buildid": "$(Build.BuildId)"
                }
              outputVariable: "functionResult"
          - bash: |
              echo "Instance: $(functionResult)"
            name: "Display_Instance"
            displayName: "Display Instance"
          - bash: |
              echo "Starting agent... for pool arm64"
              POOLID=$(az pipelines pool list | jq '.[]| select(.name == "arm64") | .id' -r)
              while [ "$(az pipelines agent list --pool-id $POOLID | jq '.[]| select(.name == "arm64-$(Build.BuildId)") | .enabled' -r)" != "true" ]
              do
                echo "Still waiting for agent arm64-$(Build.BuildId) ... "
                sleep 3
              done
              echo "Agent found ..."
            name: "Check_agent"
            displayName: "Check agent"
      - template: templates/self-hosted-jobs.yml

  - stage: HostedRunTestsBranches
    displayName: "Hosted Running tests"
    dependsOn:
      - CheckChanges
    jobs:
      - template: templates/hosted-jobs.yml

  - stage: HostedRunTestsCoverageBranches
    displayName: "Hosted Running tests with cover"
    dependsOn:
      - CheckChanges
    jobs:
      - template: templates/hosted-cover-jobs.yml

  - stage: CoverageReports
    displayName: "Coverage Report"
    dependsOn:
      - CheckChanges
      - HostedRunTestsCoverageBranches
    jobs:
      - job: CoverageReport
        displayName: "Coverage Report"
        pool:
          vmImage: "ubuntu-latest"
        variables:
          SOURCE_CODE_CHANGED:
            $[stageDependencies.CheckChanges.CheckChanges.outputs['check_changes.SOURCE_CODE_CHANGED']]
          CODE_COVERAGE_TOOL_OPTION:
            $[stageDependencies.CheckChanges.CheckChanges.outputs['check_coverage.CODE_COVERAGE_TOOL_OPTION']]
        condition: |
          and(
            and(
              eq(variables['CODE_COVERAGE_TOOL_OPTION'], 'JaCoCo'),
              eq(variables['SOURCE_CODE_CHANGED'], 'true')
            ),
            eq(variables['System.PullRequest.IsFork'], 'false')
          )
        steps:
          - download: current
            artifact: coverage-cairo
          - download: current
            artifact: coverage-griffin
          - download: current
            artifact: coverage-other
          - bash:
              curl -L
              https://github.com/questdb/questdb/raw/$(Build.SourceVersion)/ci/cover-checker-console-1.4.2-jar-with-dependencies.jar > $(Pipeline.Workspace)/cover-checker-console-1.4.2-jar-with-dependencies.jar
            displayName: "Download cover-checker-console"
          - bash:
              $JAVA_HOME_11_X64/bin/java -jar
              $(Pipeline.Workspace)/cover-checker-console-1.4.2-jar-with-dependencies.jar
              -c $(Pipeline.Workspace)/coverage-griffin/jacoco.xml
              -c $(Pipeline.Workspace)/coverage-cairo/jacoco.xml
              -c $(Pipeline.Workspace)/coverage-other/jacoco.xml
              --github-token $(GH_TOKEN) --repo
              "questdb/questdb" --pr $(System.PullRequest.PullRequestNumber) -t  $(DIFF_COVER_THRESHOLD_PCT) -type jacoco;
            displayName: "Diff coverage PR report"