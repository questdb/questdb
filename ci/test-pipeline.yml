trigger: none

pr:
  branches:
    include:
      - master

variables:
  QDB_LOG_W_FILE_LOCATION: "$(Build.BinariesDirectory)/tests.log"
  ARCHIVED_LOGS: "$(Build.ArtifactStagingDirectory)/questdb-$(Build.SourceBranchName)-$(Build.SourceVersion)-$(System.StageAttempt)-$(Agent.OS)-$(jdk).zip"
  DIFF_CONVER_THRESHOLD_PCT: 50

stages:
  - stage: StartBuildAgent
    displayName: "Start Building Agent"
    jobs:
      - job: StartArmAgent
        displayName: 'Start ARM Agent'
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - checkout: none
          - bash: |
              sudo apt-get update
              sudo apt-get install awscli
              aws autoscaling set-desired-capacity --auto-scaling-group-name ondemand-pipeline-dev --desired-capacity 1
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              AWS_DEFAULT_REGION: eu-west-1
            name: start_agent
            displayName: 'Start ARM build agent'

  - stage: RunTestsBranches
    displayName: "Running tests"
    jobs:
      - job: CheckChanges
        displayName: 'Check changes'
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - checkout: none
          - bash: |
              if [ -z "$PR_ID" ]
              then
                # No PR - cannot detect changed files, default to true
                echo "##vso[task.setvariable variable=SOURCE_CODE_CHANGED;isOutput=true]true"
              else
                CHANGED_CORE_FILES=$(curl https://api.github.com/repos/questdb/questdb/pulls/$PR_ID/files -s  | grep -oP 'filename": "core/*\/\K[^.]+')
                if [ -z "$CHANGED_CORE_FILES" ]
                  then
                    echo "##vso[task.setvariable variable=SOURCE_CODE_CHANGED;isOutput=true]false"
                  else
                    echo "##vso[task.setvariable variable=SOURCE_CODE_CHANGED;isOutput=true]true"
                fi
              fi
            env:
              PR_ID: $(System.PullRequest.PullRequestNumber)
            name: check_changes
            displayName: 'Check changed files'
      - job: RunOn
        displayName: "on"
        dependsOn: CheckChanges
        strategy:
          matrix:
            linux:
              imageName: "ubuntu-latest"
              poolName: "Azure Pipelines"
              os: Linux
              jdk: "1.11"
            mac:
              imageName: "macos-latest"
              poolName: "Azure Pipelines"
              os: macOS
              jdk: "1.11"
            windows:
              imageName: "windows-latest"
              poolName: "Azure Pipelines"
              os: Windows
              jdk: "1.11"
            linux-jdk8:
              imageName: "ubuntu-latest"
              poolName: "Azure Pipelines"
              os: Linux
              jdk: "1.8"
            
            linux-arm64:
              imageName:
              poolName: "arm64"
              os: Linux
              jdk: "1.11"
        pool:
          name: $(poolName)
          vmImage: $(imageName)
        timeoutInMinutes: 60
        variables:
          SOURCE_CODE_CHANGED: $[ dependencies.CheckChanges.outputs['check_changes.SOURCE_CODE_CHANGED'] ]
          MAVEN_CACHE_FOLDER: $(HOME)/.m2/repository
          MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER) -Xmx3072m'
        steps:
          - checkout: self
            fetchDepth: 1
            lfs: false
            submodules: false
          - bash: sudo sysctl -w fs.file-max=500000
            displayName: "Increase file count on Linux"
            condition: eq(variables['Agent.OS'], 'Linux')
          - task: ShellScript@2
            displayName: "List of coverage classes PR build"
            inputs:
              scriptPath: $(Build.SourcesDirectory)/ci/coverage.sh
              args: $(System.PullRequest.PullRequestNumber)
              failOnStandardError: true
            condition: and(and(eq(variables['Agent.OS'], 'Linux'), eq(variables['jdk'], '1.11')), not(eq(variables['System.PullRequest.PullRequestId'], '')) )
          - task: Cache@2
            inputs:
              key: '"questdb_main" | "maven"'
              restoreKeys: |
              path: $(MAVEN_CACHE_FOLDER)
          - task: Maven@3
            displayName: "Compile with Maven"
            inputs:
              mavenPomFile: "core/pom.xml"
              mavenOptions: "$(MAVEN_OPTS)"
              options: "compile -DskipTests -P build-web-console,use-built-in-nodejs -Dhttp.keepAlive=false"
              jdkVersionOption: $(jdk)
            condition: eq(variables['SOURCE_CODE_CHANGED'], 'false')
          - task: Maven@3
            displayName: "Run tests with Maven with Code Coverage"
            inputs:
              mavenPomFile: "core/pom.xml"
              mavenOptions: "$(MAVEN_OPTS)"
              goals: "test"
              options: "--batch-mode --quiet -P build-web-console,use-built-in-nodejs -Dout=$(Build.SourcesDirectory)/ci/qlog.conf -Dhttp.keepAlive=false"
              jdkVersionOption: $(jdk)
              codeCoverageToolOption: "$(CODE_COVERAGE_TOOL_OPTION)"
              codeCoverageClassFilter: "$(COVERAGE_DIFF)"
            timeoutInMinutes: 55
            condition: |
              and(
                   and(
                      and( eq(variables['Agent.OS'], 'Linux'), eq(variables['jdk'], '1.11') ),
                      not( eq(variables['System.PullRequest.PullRequestId'], '') )
                  ),
                  eq(variables['SOURCE_CODE_CHANGED'], 'true')
              )
          - task: Maven@3
            displayName: "Run tests with Maven"
            inputs:
              mavenPomFile: "core/pom.xml"
              mavenOptions: "$(MAVEN_OPTS)"
              goals: "clean test"
              options: "--batch-mode --quiet -P build-web-console,use-built-in-nodejs -Dout=$(Build.SourcesDirectory)/ci/qlog.conf -Dhttp.keepAlive=false"
              jdkVersionOption: $(jdk)
            timeoutInMinutes: 55
            condition: |
              and(
                not(
                   and(
                      and( eq(variables['Agent.OS'], 'Linux'), eq(variables['jdk'], '1.11') ),
                      not( eq(variables['System.PullRequest.PullRequestId'], '') )
                  )
                ),
                eq(variables['SOURCE_CODE_CHANGED'], 'true')
              )
          - bash: if [ "$CODE_COVERAGE_TOOL_OPTION" == "JaCoCo" ] && [ "$IF_FORK" != "YES" ]; then $JAVA_HOME_11_X64/bin/java -jar $SOURCES/ci/cover-checker-console-1.4.2-jar-with-dependencies.jar -c $SOURCES/$COVERAGE_REPORT_PATH --github-token $SYSTEM_ACCESSTOKEN --repo "questdb/questdb" --pr $PR_ID -t $DIFF_CONVER_THRESHOLD_PCT -type jacoco; fi
            displayName: "Diff coverage PR report"
            env:
              CODE_COVERAGE_TOOL_OPTION: "$(CODE_COVERAGE_TOOL_OPTION)"
              IF_FORK: "$(IF_FORK)"
              SYSTEM_ACCESSTOKEN: $(GH_TOKEN)
              PR_ID: $(System.PullRequest.PullRequestNumber)
              SOURCES: $(Build.SourcesDirectory)
              COVERAGE_REPORT_PATH: core/CCReport43F6D5EF/jacoco.xml
              DIFF_CONVER_THRESHOLD_PCT: $(DIFF_CONVER_THRESHOLD_PCT)
            condition: |
              and(
                  and(
                     and( eq(variables['Agent.OS'], 'Linux'), eq(variables['jdk'], '1.11') ),
                     not( eq(variables['System.PullRequest.PullRequestId'], '') )
                 ),
                 eq(variables['SOURCE_CODE_CHANGED'], 'true')
              )
          - task: ArchiveFiles@2
            displayName: "Tests failed -- Compress logs"
            condition: not(succeeded())
            inputs:
              rootFolderOrFile: $(QDB_LOG_W_FILE_LOCATION)
              includeRootFolder: false
              archiveFile: $(ARCHIVED_LOGS)
              quiet: true
          - task: PublishBuildArtifacts@1
            displayName: "Tests failed -- Upload logs"
            condition: not(succeeded())
            inputs:
              pathToPublish: $(ARCHIVED_LOGS)
              artifactName: MavenFailedTestsLogs

  - stage: StopBuildAgent
    displayName: "Stop Building Agent"
    condition: always()
    jobs:
      - job: StopArmAgent
        displayName: 'Stop ARM Agent'
        pool:
          vmImage: "ubuntu-latest"
        
        steps:
          - checkout: none
          - bash: echo ${AZURE_DEVOPS_CLI_PAT} | az devops login
            env:
              AZURE_DEVOPS_CLI_PAT: $(System.AccessToken)
            displayName: 'Login Azure DevOps Extension'

          - bash: az devops configure --defaults organization=$(System.TeamFoundationCollectionUri) project=$(System.TeamProject) --use-git-aliases true
            displayName: 'Set default Azure DevOps organization and project'
          
          - bash: |
              sudo apt-get update
              sudo apt-get install -y awscli jq
            displayName: 'Install dependecies'
          
          - bash: |
              count=$(az pipelines runs list --pipeline-ids 1 --status inProgress --detect true --project questdb | jq length)
              echo "Running builds: ${count}"
              if [ $count -gt 1 ]; then
                echo "Skipping another build is running in background.."
              else
                echo "Stopping the build agent!"
                aws autoscaling set-desired-capacity --auto-scaling-group-name ondemand-pipeline-dev --desired-capacity 0
              fi
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              AWS_DEFAULT_REGION: eu-west-1
            name: check_if_stop_agent
            displayName: 'Check/stop build agent'