jobs:
  - job: RunOn
    displayName: "on"
    strategy:
      matrix:
        linux-jdk17:
          imageName: "ubuntu-latest"
          poolName: "Azure Pipelines"
          os: Linux
          jdk: "1.17"
    pool:
      vmImage: $(imageName)
      name: $(poolName)
    timeoutInMinutes: 15
    variables:
      SOURCE_CODE_CHANGED: $[stageDependencies.CheckChanges.CheckChanges.outputs['check_changes.SOURCE_CODE_CHANGED']]
      COVERAGE_DIFF: $[stageDependencies.CheckChanges.CheckChanges.outputs['check_coverage.COVERAGE_DIFF']]
      CODE_COVERAGE_TOOL_OPTION: $[stageDependencies.CheckChanges.CheckChanges.outputs['check_coverage.CODE_COVERAGE_TOOL_OPTION']]
      ARCHIVED_CRASH_LOG: "$(Build.ArtifactStagingDirectory)/questdb-crash-$(Build.SourceBranchName)-$(Build.SourceVersion)-$(System.StageAttempt)-$(Agent.OS)-$(jdk).log"
    steps:
      - checkout: self
        fetchDepth: 1
        lfs: false
        submodules: false
      - task: JavaToolInstaller@0
        inputs:
          versionSpec: '17'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'PreInstalled'
      - bash: |
          wget "https://download.jetbrains.com/product?code=IIC&latest&distribution=linux" -O intellij.tar.gz
          mkdir -p /opt/intellij
          tar xvz -C /opt/intellij -f intellij.tar.gz
          rm intellij.tar.gz
          cd /opt/intellij
          ln -s idea-* idea
          echo "JAVA_HOME: $JAVA_HOME"
          echo "java --version"
          java --version
        displayName: "Install IntelliJ"
      - bash: /opt/intellij/idea/bin/idea.sh format -s .idea/codeStyles/Project.xml -m "*.java" -r .
        displayName: "Applying formatting"
      - bash: git status -s
        displayName: "List of affected files"
      - bash: git diff --exit-code
        displayName: "List of required changes"

#        Rust lint and test
      - script: |
          python3 .github/prepare_rust_env.py --export-cargo-install-env --components rustfmt clippy --match core/rust/qdbr/rust-toolchain.toml
        displayName: "Ensure Rust is installed"
        # Note, the `prepare_rust_env.py` script exports a number of variables.
      - task: Cache@2
        continueOnError: true
        inputs:
          key: '"cargo-registry" | "$(RUSTC_HOST_TRIPLE)" | "$(RUSTC_RELEASE)"'
          path: $(CARGO_HOME)/registry
        displayName: "Cache ~/.cargo/registry"
      - script: |
          cd core/rust/qdb-core
          cargo test --all-targets --all-features --no-fail-fast --verbose
        displayName: "qdb-core: cargo test"
        # We run these as part of the other CI runs anyway through the rust-maven-plugin,
        # but if the Rust tests fail it's easier to see the output here
        # since it doesn't get buried thousands of lines deep in the Java test logs.
      - script: |
          cd core/rust/qdb-core
          cargo clippy --all-targets --all-features -- -D warnings
        displayName: "qdb-core: cargo clippy"
      - script: |
          cd core/rust/qdb-core
          cargo fmt --check
        displayName: "qdb-core: cargo fmt"
      - script: |
          cd core/rust/qdbr
          cargo test --all-targets --all-features --no-fail-fast --verbose
        displayName: "qdbr: cargo test"
        # We run these as part of the other CI runs anyway through the rust-maven-plugin,
        # but if the Rust tests fail it's easier to see the output here
        # since it doesn't get buried thousands of lines deep in the Java test logs.
      - script: |
          cd core/rust/qdbr
          cargo clippy --all-targets --all-features -- -D warnings
        displayName: "qdbr: cargo clippy"
      - script: |
          cd core/rust/qdbr
          cargo fmt --check
        displayName: "qdbr: cargo fmt"

#       Javadoc
      - task: Maven@3
        displayName: "Javadoc"
        inputs:
          mavenVersionOption: "$(MAVEN_VERSION_OPTION)"
          mavenDirectory: '$(build.sourcesdirectory)/maven/apache-maven-$(MAVEN_VERSION)'
          mavenPomFile: "pom.xml"
          mavenOptions: "$(MAVEN_OPTS)"
          options:
            "compile $(javadoc:javadoc) -DskipTests -P javadoc -P qdbr-release $(MAVEN_RUN_OPTS)"
          jdkVersionOption: $(jdk)
