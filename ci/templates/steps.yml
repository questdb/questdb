steps:
  - checkout: self
    fetchDepth: 1
    lfs: false
    submodules: false
  - bash: sudo sysctl -w fs.file-max=500000
    displayName: "Increase file count on Linux"
    condition: eq(variables['os'], 'Linux')
  - task: Cache@2
    inputs:
      key: '"questdb_main" | "$(Agent.OS)" | "$(jdk)" | "maven"'
      restoreKeys: |
        "questdb_main" | "$(Agent.OS)" | "$(jdk)" | "maven"
      path: $(MAVEN_CACHE_FOLDER)
  - bash: |
      echo "SOURCE_CODE_CHANGED: $(SOURCE_CODE_CHANGED)"
      echo "RUST_SOURCE_CODE_CHANGED: $(RUST_SOURCE_CODE_CHANGED)"
      echo "COVERAGE_DIFF: $(COVERAGE_DIFF)"
      echo "CODE_COVERAGE_TOOL_OPTION: $(CODE_COVERAGE_TOOL_OPTION)"
    displayName: "Print out task variables"

  - task: Cache@2
    inputs:
      key: '"maven_version" | "$(MAVEN_VERSION)"'
      restoreKeys: mykey | "$(MAVEN_VERSION)"
      path: $(build.sourcesdirectory)/maven/apache-maven-$(MAVEN_VERSION)
      cacheHitVar: MVN_CACHE_RESTORED
    condition: ne(variables['MAVEN_VERSION_OPTION'], 'Default')

  - script: 'wget https://archive.apache.org/dist/maven/maven-3/$(MAVEN_VERSION)/binaries/apache-maven-$(MAVEN_VERSION)-bin.zip'
    condition: and(ne(variables['MAVEN_VERSION_OPTION'], 'Default'), ne(variables.MVN_CACHE_RESTORED, 'true'), ne(variables['os'], 'Windows'))
  - script: "powershell -Command \"(new-object System.Net.WebClient).DownloadFile('https://www.apache.org/dist/maven/maven-3/$(MAVEN_VERSION)/binaries/apache-maven-$(MAVEN_VERSION)-bin.zip','$(build.sourcesdirectory)\\apache-maven-$(MAVEN_VERSION)-bin.zip')\""
    condition: and(ne(variables['MAVEN_VERSION_OPTION'], 'Default'), ne(variables.MVN_CACHE_RESTORED, 'true'), eq(variables['os'], 'Windows'))
  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: 'apache-maven-$(MAVEN_VERSION)-bin.zip'
      destinationFolder: '$(build.sourcesdirectory)/maven'
    condition: and(ne(variables['MAVEN_VERSION_OPTION'], 'Default'), ne(variables.MVN_CACHE_RESTORED, 'true'))

  - bash: |
      set -eux
      # Fetch and execute LLVM installation script
      wget https://apt.llvm.org/llvm.sh
      sudo bash llvm.sh
      # CURRENT_LLVM_STABLE in the script tells which version it installed. Extract it from the script: 
      export $(grep CURRENT_LLVM_STABLE= llvm.sh)
      # ... and set a task variable to its value
      echo "##vso[task.setvariable variable=LLVM_VERSION]$CURRENT_LLVM_STABLE"
      sudo apt-get install llvm-$CURRENT_LLVM_STABLE

      # Install Cobertura
      wget https://raw.githubusercontent.com/eriwen/lcov-to-cobertura-xml/master/lcov_cobertura/lcov_cobertura.py
      chmod +x lcov_cobertura.py
    displayName: "Install Rust coverage dependencies"
    condition: |
      and(
        eq(variables['testset'], 'coverage'),
        eq(variables['RUST_SOURCE_CODE_CHANGED'], 'true')
      )

  - script: python3 ci/prepare_rust_env.py --export-cargo-install-env
    displayName: "Ensure Rust is installed"
    # Note, the `prepare_rust_env.py` script exports a number of variables.
  - task: Cache@2
    inputs:
      key: '"cargo-registry" | "$(RUSTC_HOST_TRIPLE)" | "$(RUSTC_RELEASE)" | "$(LINUX_GLIBC_VERSION)" | **/Cargo.lock'
      restoreKeys: |
        "cargo-registry" | "$(RUSTC_HOST_TRIPLE)" | "$(RUSTC_RELEASE)" | "$(LINUX_GLIBC_VERSION)" | **/Cargo.lock
        "cargo-registry" | "$(RUSTC_HOST_TRIPLE)" | "$(RUSTC_RELEASE)" | "$(LINUX_GLIBC_VERSION)"
      path: $(CARGO_HOME)/registry
    displayName: "Cache ~/.cargo/registry"
    condition: |
      and(
        eq(variables['testset'], 'coverage'),
        eq(variables['RUST_SOURCE_CODE_CHANGED'], 'true')
      )

  - task: Maven@3
    displayName: "Compile with Maven"
    inputs:
      mavenVersionOption: "$(MAVEN_VERSION_OPTION)"
      mavenDirectory: '$(build.sourcesdirectory)/maven/apache-maven-$(MAVEN_VERSION)'
      mavenPomFile: "pom.xml"
      mavenOptions: "$(MAVEN_OPTS)"
      options:
        "compile $(javadoc_step) -DskipTests -P build-web-console$(javadoc_profile) -P qdbr-release $(MAVEN_RUN_OPTS)"
      jdkVersionOption: $(jdk)
    condition: |
      or(
        eq(variables['testset'], 'none'),
        eq(variables['SOURCE_CODE_CHANGED'], 'false')
      )
  - task: Maven@3
    displayName: "Run tests"
    inputs:
      mavenVersionOption: "$(MAVEN_VERSION_OPTION)"
      mavenDirectory: '$(build.sourcesdirectory)/maven/apache-maven-$(MAVEN_VERSION)'
      mavenPomFile: "pom.xml"
      mavenOptions: "$(MAVEN_OPTS)"
      goals: "clean test"
      options:
        "--batch-mode --quiet -Dtest.include=$(includeTests)
        -Dtest.exclude=$(excludeTests)
        -Dout=$(Build.SourcesDirectory)/ci/qlog.conf 
        -DfailIfNoTests=false
        -Dsurefire.failIfNoSpecifiedTests=false
         $(MAVEN_RUN_OPTS)"
      jdkVersionOption: $(jdk)
    timeoutInMinutes: 55
    condition: |
      and(
        eq(variables['testset'], 'all'),
        eq(variables['SOURCE_CODE_CHANGED'], 'true')
      )
  - bash: echo "##vso[task.setvariable variable=LLVM_PROFILE_FILE]questdbr-junit.profraw"
    displayName: "LLVM_PROFILE_FILE=questdbr-junit.profraw"
    condition: eq(variables['testset'], 'coverage')
  - task: Maven@3
    displayName: "Run tests with Coverage"
    inputs:
      mavenVersionOption: "$(MAVEN_VERSION_OPTION)"
      mavenDirectory: '$(build.sourcesdirectory)/maven/apache-maven-$(MAVEN_VERSION)'
      mavenPomFile: "core/pom.xml"
      mavenOptions: "$(MAVEN_OPTS)"
      goals: "test"
      options:
        "--batch-mode --quiet -Dtest.include=**/griffin/engine/table/parquet/**
        -Dtest.exclude=$(excludeTests)
        -Dout=$(Build.SourcesDirectory)/ci/qlog.conf 
        -P qdbr-coverage
        $(MAVEN_RUN_OPTS)"
      jdkVersionOption: $(jdk)
      codeCoverageToolOption: "$(CODE_COVERAGE_TOOL_OPTION)"
      codeCoverageClassFilter: "$(COVERAGE_DIFF)"
    timeoutInMinutes: 55
    condition: |
      and(
        eq(variables['testset'], 'coverage'),
        or( 
            eq(variables['CODE_COVERAGE_TOOL_OPTION'], 'JaCoCo'),
            eq(variables['RUST_SOURCE_CODE_CHANGED'], 'true')
        )
      )

  - bash: |
      set -eux
      pushd core/rust/qdbr
      RUSTFLAGS="-C instrument-coverage -D warnings" cargo build --tests
      popd
      QUESTDBR_TEST_BIN=$(find ./core/target/rust-maven-plugin/qdbr/debug/deps/questdbr-* -type f -executable)
      LLVM_PROFILE_FILE="questdbr-cargo-test.profraw" $QUESTDBR_TEST_BIN
    displayName: "Run Rust tests for code coverage"
    condition: |
      and(
        eq(variables['testset'], 'coverage'),
        eq(variables['RUST_SOURCE_CODE_CHANGED'], 'true')
      )

  - bash: |
      find . -type f -name 'hs_*.log' -exec sh -c 'x="{}"; mv "$x" "$(ARCHIVED_CRASH_LOG)"' \;
    displayName: "Tests failed -- rename crash dump"
    workingDirectory: $(Build.SourcesDirectory)/core/
    condition: failed()
  - task: PublishBuildArtifacts@1
    displayName: "Tests failed -- Upload crash logs"
    condition: failed()
    inputs:
      pathToPublish: $(ARCHIVED_CRASH_LOG)
      artifactName: CrashDump
  - task: ArchiveFiles@2
    displayName: "Tests failed -- Compress logs"
    condition: failed()
    inputs:
      rootFolderOrFile: $(QDB_LOG_W_FILE_LOCATION)
      includeRootFolder: false
      archiveFile: $(ARCHIVED_LOGS)
      quiet: true
  - task: PublishBuildArtifacts@1
    displayName: "Tests failed -- Upload logs"
    condition: failed()
    inputs:
      pathToPublish: $(ARCHIVED_LOGS)
      artifactName: MavenFailedTestsLogs

  - bash: |
      ## Generate Rust coverage report
      set -eux
      export PATH=/usr/lib/llvm-$LLVM_VERSION/bin:$PATH
      find . -name \*.profraw

      # Merge the raw Rust coverage reports
      FROM_RUST_TEST=questdbr-cargo-test.profraw
      FROM_JAVA_TEST=core/rust/qdbr/questdbr-junit.profraw
      if [ ! -f $FROM_RUST_TEST ]; then
        FROM_RUST_TEST=""
      fi
      if [ ! -f $FROM_JAVA_TEST ]; then
        FROM_JAVA_TEST=""
      fi
      if [ -n "$FROM_RUST_TEST" -o -n "$FROM_JAVA_TEST" ]; then
        llvm-profdata merge -sparse -o questdbr.profdata $FROM_RUST_TEST $FROM_JAVA_TEST
      else
        echo "LLVM profiling files not found"
        ls -al
        ls -al core
        exit -1
      fi

      # Compile the merged coverage report into an HTML report
      QUESTDBR_TEST_BIN=$(find ./core/target/rust-maven-plugin/qdbr/debug/deps/questdbr-* -type f -executable)
      llvm-cov show \
        --format=html \
        --output-dir=questdbr-coverage-report \
        --ignore-filename-regex='(.cargo/registry|rustc/.*\.rs)' \
        --instr-profile=questdbr.profdata \
        --object core/target/rust-maven-plugin/qdbr/debug/libquestdbr.so \
        --object $QUESTDBR_TEST_BIN

      # Export the merged coverage report to LCOV format
      llvm-cov export \
        --format=lcov \
        --ignore-filename-regex='(.cargo/registry|rustc/.*\.rs)' \
        --instr-profile=questdbr.profdata \
        --object core/target/rust-maven-plugin/qdbr/debug/libquestdbr.so \
        --object $QUESTDBR_TEST_BIN > questdbr.lcov.dat

      # Convert LCOV coverage results to Cobertura XML format
      # https://www.collabora.com/news-and-blog/blog/2021/03/24/rust-integrating-llvm-source-base-code-coverage-with-gitlab/
      python3 lcov_cobertura.py questdbr.lcov.dat --output questdbr-coverage-report/cobertura.xml --base-dir core/rust/qdbr/src
    displayName: "Generate Rust coverage report"
    condition: |
      and(
        eq(variables['testset'], 'coverage'),
        eq(variables['RUST_SOURCE_CODE_CHANGED'], 'true')
      )

  - task: PublishBuildArtifacts@1
    displayName: "Upload Java coverage report"
    condition: |
      and(
        eq(variables['testset'], 'coverage'),
        eq(variables['CODE_COVERAGE_TOOL_OPTION'], 'JaCoCo'),
        eq(variables['System.PullRequest.IsFork'], 'false')
      )
    inputs:
      pathToPublish: $(Build.SourcesDirectory)/core/CCReport43F6D5EF
      artifactName: jacoco-coverage
  - task: PublishBuildArtifacts@1
    displayName: "Upload Rust coverage report"
    condition: |
      and(
        eq(variables['testset'], 'coverage'),
        eq(variables['RUST_SOURCE_CODE_CHANGED'], 'true'),
        eq(variables['System.PullRequest.IsFork'], 'false')
      )
    inputs:
      pathToPublish: $(Build.SourcesDirectory)/questdbr-coverage-report
      artifactName: rust-llvm-coverage
