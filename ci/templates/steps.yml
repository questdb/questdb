steps:
  - checkout: self
    fetchDepth: 1
    lfs: false
    submodules: false
  - bash: sudo sysctl -w fs.file-max=500000
    displayName: "Increase file count on Linux"
    condition: eq(variables['os'], 'Linux')
  - task: Cache@2
    inputs:
      key: '"questdb_main" | "$(Agent.OS)" | "$(jdk)" | "maven"'
      path: $(MAVEN_CACHE_FOLDER)

  - task: Cache@2
    inputs:
      key: '"maven_version" | "$(MAVEN_VERSION)"'
      path: $(build.sourcesdirectory)/maven/apache-maven-$(MAVEN_VERSION)
      cacheHitVar: MVN_CACHE_RESTORED
    condition: ne(variables['MAVEN_VERSION_OPTION'], 'Default')

  - script: 'wget https://archive.apache.org/dist/maven/maven-3/$(MAVEN_VERSION)/binaries/apache-maven-$(MAVEN_VERSION)-bin.zip'
    condition: and(ne(variables['MAVEN_VERSION_OPTION'], 'Default'), ne(variables.MVN_CACHE_RESTORED, 'true'), ne(variables['os'], 'Windows'))
  - script: "powershell -Command \"(new-object System.Net.WebClient).DownloadFile('https://www.apache.org/dist/maven/maven-3/$(MAVEN_VERSION)/binaries/apache-maven-$(MAVEN_VERSION)-bin.zip','$(build.sourcesdirectory)\\apache-maven-$(MAVEN_VERSION)-bin.zip')\""
    condition: and(ne(variables['MAVEN_VERSION_OPTION'], 'Default'), ne(variables.MVN_CACHE_RESTORED, 'true'), eq(variables['os'], 'Windows'))
  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: 'apache-maven-$(MAVEN_VERSION)-bin.zip'
      destinationFolder: '$(build.sourcesdirectory)/maven'
    condition: and(ne(variables['MAVEN_VERSION_OPTION'], 'Default'), ne(variables.MVN_CACHE_RESTORED, 'true'))

  - template: install-llvm.yml
    parameters:
      shouldRun: |
        and(
          startsWith(variables['testset'], 'coverage'),
          eq(variables['RUST_SOURCE_CODE_CHANGED'], 'true'),
          eq(variables['System.PullRequest.IsFork'], 'false')
        )

  - script: python3 .github/prepare_rust_env.py
    displayName: "Ensure Rust is installed"
    # Note, the `prepare_rust_env.py` script exports a number of variables.
  - task: Cache@2
    inputs:
      key: '"cargo-registry" | "$(RUSTC_HOST_TRIPLE)" | "$(RUSTC_RELEASE)" | "$(LINUX_GLIBC_VERSION)" | **/Cargo.lock'
      restoreKeys: |
        "cargo-registry" | "$(RUSTC_HOST_TRIPLE)" | "$(RUSTC_RELEASE)" | "$(LINUX_GLIBC_VERSION)"
      path: $(CARGO_HOME)/registry
    displayName: "Cache ~/.cargo/registry"
    condition: |
      and(
        startsWith(variables['testset'], 'coverage'),
        eq(variables['RUST_SOURCE_CODE_CHANGED'], 'true')
      )

  - task: Maven@3
    displayName: "Compile with Maven"
    inputs:
      mavenVersionOption: "$(MAVEN_VERSION_OPTION)"
      mavenDirectory: '$(build.sourcesdirectory)/maven/apache-maven-$(MAVEN_VERSION)'
      mavenPomFile: "pom.xml"
      mavenOptions: "$(MAVEN_OPTS)"
      options:
        "compile $(javadoc_step) -DskipTests -P build-web-console$(javadoc_profile) -P qdbr-release $(MAVEN_RUN_OPTS)"
      jdkVersionOption: $(jdk)
    condition: |
      or(
        eq(variables['testset'], 'none'),
        eq(variables['SOURCE_CODE_CHANGED'], 'false')
      )
  - task: Maven@3
    displayName: "Run tests"
    inputs:
      mavenVersionOption: "$(MAVEN_VERSION_OPTION)"
      mavenDirectory: '$(build.sourcesdirectory)/maven/apache-maven-$(MAVEN_VERSION)'
      mavenPomFile: "pom.xml"
      mavenOptions: "$(MAVEN_OPTS)"
      goals: "clean test"
      options:
        "--batch-mode --quiet -Dtest.include=$(includeTests)
        -Dtest.exclude=$(excludeTests)
        -Dout=$(Build.SourcesDirectory)/ci/qlog.conf 
        -DfailIfNoTests=false
        -Dsurefire.failIfNoSpecifiedTests=false
         $(MAVEN_RUN_OPTS)"
      jdkVersionOption: $(jdk)
    timeoutInMinutes: 55
    condition: |
      and(
        eq(variables['testset'], 'all'),
        eq(variables['SOURCE_CODE_CHANGED'], 'true')
      )
  - bash: echo "##vso[task.setvariable variable=LLVM_PROFILE_FILE]questdbr-junit.profraw"
    displayName: "LLVM_PROFILE_FILE=questdbr-junit.profraw"
    condition: startsWith(variables['testset'], 'coverage')
  - task: Maven@3
    displayName: "Run tests with Coverage"
    inputs:
      mavenVersionOption: "$(MAVEN_VERSION_OPTION)"
      mavenDirectory: '$(build.sourcesdirectory)/maven/apache-maven-$(MAVEN_VERSION)'
      mavenPomFile: "core/pom.xml"
      mavenOptions: "$(MAVEN_OPTS)"
      goals: "test"
      options:
        "--batch-mode -Dtest.include=$(includeTests)
        -Dtest.exclude=$(excludeTests)
        -Dout=$(Build.SourcesDirectory)/ci/qlog.conf 
        -P qdbr-coverage
        $(MAVEN_RUN_OPTS)"
      jdkVersionOption: $(jdk)
      codeCoverageToolOption: "$(CODE_COVERAGE_TOOL_OPTION)"
      codeCoverageClassFilter: "$(COVERAGE_DIFF)"
    timeoutInMinutes: 55
    condition: |
      and(
        startsWith(variables['testset'], 'coverage'),
        eq(variables['System.PullRequest.IsFork'], 'false'),
        or( 
            eq(variables['CODE_COVERAGE_TOOL_OPTION'], 'JaCoCo'),
            eq(variables['RUST_SOURCE_CODE_CHANGED'], 'true')
        )
      )

  - bash: find . -type f -name 'hs_*.log' -exec sh -c 'x="{}"; mv "$x" "$(ARCHIVED_CRASH_LOG)"' \;
    displayName: "Tests failed -- rename crash dump"
    workingDirectory: $(Build.SourcesDirectory)/core/
    condition: failed()
  - task: PublishBuildArtifacts@1
    displayName: "Tests failed -- Upload crash logs"
    condition: failed()
    inputs:
      pathToPublish: $(ARCHIVED_CRASH_LOG)
      artifactName: CrashDump
  - task: ArchiveFiles@2
    displayName: "Tests failed -- Compress logs"
    condition: failed()
    inputs:
      rootFolderOrFile: $(QDB_LOG_W_FILE_LOCATION)
      includeRootFolder: false
      archiveFile: $(ARCHIVED_LOGS)
      quiet: true
  - task: PublishBuildArtifacts@1
    displayName: "Tests failed -- Upload logs"
    condition: failed()
    inputs:
      pathToPublish: $(ARCHIVED_LOGS)
      artifactName: MavenFailedTestsLogs

  - bash: |
      set -eux
      mv core/CCReport43F6D5EF/jacoco.exec $(testset).exec
    displayName: "Prepare partial JaCoCo report for upload"
    condition: |
      and(
        startsWith(variables['testset'], 'coverage'),
        eq(variables['CODE_COVERAGE_TOOL_OPTION'], 'JaCoCo'),
        eq(variables['System.PullRequest.IsFork'], 'false')
      )
  - task: PublishBuildArtifacts@1
    displayName: "Upload partial JaCoCo report"
    condition: |
      and(
        startsWith(variables['testset'], 'coverage'),
        eq(variables['CODE_COVERAGE_TOOL_OPTION'], 'JaCoCo'),
        eq(variables['System.PullRequest.IsFork'], 'false')
      )
    inputs:
      pathToPublish: $(Build.SourcesDirectory)/$(testset).exec
      artifactName: jacoco-coverage
  - bash: |
      set -eux
      export PATH=/usr/lib/llvm-$LLVM_VERSION/bin:$PATH
      # List profraw files for debugging purposes
      find . -name \*.profraw
      CANDIDATE_FILES="core/rust/qdbr/questdbr-cargo-test.profraw core/questdbr-junit.profraw"
      PROFRAW_FILES=$(for f in $CANDIDATE_FILES; do [ -f "$f" ] && echo -n "$f "; done)
      PROFRAW_FILES=${PROFRAW_FILES% }
      if [ -z "$PROFRAW_FILES" ]; then
        echo "LLVM profiling files not found"
        exit -1
      fi
      llvm-profdata merge -sparse -o $(testset).profdata $PROFRAW_FILES
    displayName: "Create partial Rust coverage report in LLVM format"
    condition: |
      and(
        startsWith(variables['testset'], 'coverage'),
        eq(variables['RUST_SOURCE_CODE_CHANGED'], 'true'),
        eq(variables['System.PullRequest.IsFork'], 'false')
      )
  - task: PublishBuildArtifacts@1
    displayName: "Upload partial Rust coverage report"
    condition: |
      and(
        startsWith(variables['testset'], 'coverage'),
        eq(variables['RUST_SOURCE_CODE_CHANGED'], 'true'),
        eq(variables['System.PullRequest.IsFork'], 'false')
      )
    inputs:
      pathToPublish: $(Build.SourcesDirectory)/$(testset).profdata
      artifactName: rust-llvm-coverage
  - bash: |
      set -eux
      QUESTDBR_TEST_BIN=$(find ./core/target/rust-maven-plugin/qdbr/debug/deps/questdbr-* -type f -executable)
      mkdir rust-coverage-binaries
      mv core/target/rust-maven-plugin/qdbr/debug/libquestdbr.so rust-coverage-binaries/
      mv $QUESTDBR_TEST_BIN rust-coverage-binaries/questdbr-test-binary
    displayName: "Prepare Rust binaries for upload"
    condition: |
      and(
        eq(variables['testset'], 'coverage-griffin'),
        eq(variables['RUST_SOURCE_CODE_CHANGED'], 'true'),
        eq(variables['System.PullRequest.IsFork'], 'false')
      )
  - task: PublishBuildArtifacts@1
    displayName: "Upload Rust binaries needed to merge coverage files"
    condition: |
      and(
        eq(variables['testset'], 'coverage-griffin'),
        eq(variables['RUST_SOURCE_CODE_CHANGED'], 'true'),
        eq(variables['System.PullRequest.IsFork'], 'false')
      )
    inputs:
      pathToPublish: $(Build.SourcesDirectory)/rust-coverage-binaries
      artifactName: rust-llvm-coverage
